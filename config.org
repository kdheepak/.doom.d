#+TITLE: EMACS doom configuration
#+AUTHOR: Dheepak Krishnamurthy
#+EMAIL: me@kdheepak.com
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* Introduction

This is $DOOMDIR/config.el -*- lexical-binding: t; -*-

Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!

* Configuration

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Dheepak Krishnamurthy"
      user-mail-address "me@kdheepak.com")
#+END_SRC

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 14))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one)
#+END_SRC

If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC


Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Org mode level headers

Stop the org-level headers from increasing in height relative to the other text.

#+BEGIN_SRC emacs-lisp
(defun my/org-mode-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
    (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

(add-hook 'org-mode-hook 'my/org-mode-hook)
#+END_SRC

* Evil window splits

Make splits behave like they would in tmux

#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t)
(setq evil-split-window-below t)
#+END_SRC

* Setup Projectile project paths

#+BEGIN_SRC emacs-lisp
(setq
 display-line-numbers-type 'relative
 projectile-project-search-path '("~/gitrepos/"))
#+END_SRC

* Setup Python

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(setenv "PYTHONPATH"    "~/miniconda3/bin")
#+END_SRC

* Setup Julia

#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:jupyter-julia '((:async . "yes")
                                                    (:session . "jl")
                                                    (:kernel . "julia-1.3")))

(add-to-list 'exec-path "~/miniconda3/envs/julia-py3-env/bin")
#+END_SRC

* Setup EMACS frame

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist
             '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist
             '(ns-appearance . dark))
#+END_SRC
